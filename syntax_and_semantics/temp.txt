		"s: translation_unit $ ",
		"primary_expression: IDENTIFIER ",
		"primary_expression: CONSTANT ",
		"primary_expression: STRING_LITERAL ",
		"primary_expression: ( expression ) ",
		"postfix_expression: primary_expression ",
		"postfix_expression: postfix_expression [ expression ] ",
		"postfix_expression: postfix_expression ( ) ",
		"postfix_expression: postfix_expression ( argument_expression_list ) ",
		"postfix_expression: postfix_expression . IDENTIFIER ",
		"postfix_expression: postfix_expression PTR_OP IDENTIFIER ",
		"postfix_expression: postfix_expression INC_OP ",
		"postfix_expression: postfix_expression DEC_OP ",
		"postfix_expression: ( type_specifier ) { initializer_list } ",
		"postfix_expression: ( type_specifier ) { initializer_list , } ",
		"argument_expression_list: assignment_expression ",
		"argument_expression_list: argument_expression_list , assignment_expression ",
		"unary_expression: postfix_expression ",
		"unary_expression: INC_OP unary_expression ",
		"unary_expression: DEC_OP unary_expression ",
		"unary_expression: unary_operator cast_expression ",
		"unary_operator: & ",
		"unary_operator: * ",
		"unary_operator: + ",
		"unary_operator: - ",
		"unary_operator: ~ ",
		"unary_operator: ! ",
		"cast_expression: unary_expression ",
		"cast_expression: ( type_specifier ) cast_expression ",
		"multiplicative_expression: cast_expression ",
		"multiplicative_expression: multiplicative_expression * cast_expression ",
		"multiplicative_expression: multiplicative_expression / cast_expression ",
		"multiplicative_expression: multiplicative_expression % cast_expression ",
		"additive_expression: multiplicative_expression ",
		"additive_expression: additive_expression + multiplicative_expression ",
		"additive_expression: additive_expression - multiplicative_expression ",
		"shift_expression: additive_expression ",
		"shift_expression: shift_expression LEFT_OP additive_expression ",
		"shift_expression: shift_expression RIGHT_OP additive_expression ",
		"relational_expression: shift_expression ",
		"relational_expression: relational_expression < shift_expression ",
		"relational_expression: relational_expression > shift_expression ",
		"relational_expression: relational_expression LE_OP shift_expression ",
		"relational_expression: relational_expression GE_OP shift_expression ",
		"equality_expression: relational_expression ",
		"equality_expression: equality_expression EQ_OP relational_expression ",
		"equality_expression: equality_expression NE_OP relational_expression ",
		"and_expression: equality_expression ",
		"and_expression: and_expression & equality_expression ",
		"exclusive_or_expression: and_expression ",
		"exclusive_or_expression: exclusive_or_expression ^ and_expression ",
		"inclusive_or_expression: exclusive_or_expression ",
		"inclusive_or_expression: inclusive_or_expression | exclusive_or_expression ",
		"logical_and_expression: inclusive_or_expression ",
		"logical_and_expression: logical_and_expression AND_OP inclusive_or_expression ",
		"logical_or_expression: logical_and_expression ",
		"logical_or_expression: logical_or_expression OR_OP logical_and_expression ",
		"conditional_expression: logical_or_expression ",
		"conditional_expression: logical_or_expression ? expression : conditional_expression ",
		"assignment_expression: conditional_expression ",
		"assignment_expression: unary_expression assignment_operator assignment_expression ",
		"assignment_operator: = ",
		"assignment_operator: MUL_ASSIGN ",
		"assignment_operator: DIV_ASSIGN ",
		"assignment_operator: MOD_ASSIGN ",
		"assignment_operator: ADD_ASSIGN ",
		"assignment_operator: SUB_ASSIGN ",
		"assignment_operator: LEFT_ASSIGN ",
		"assignment_operator: RIGHT_ASSIGN ",
		"assignment_operator: AND_ASSIGN ",
		"assignment_operator: OR_ASSIGN ",
		"expression: assignment_expression ",
		"expression: expression , assignment_expression ",
		"constant_expression: conditional_expression ",
		"declaration_specifiers: type_specifier ",
		"declaration_specifiers: type_specifier declaration_specifiers ",
		"declaration: declaration_specifiers ; ",
		"declaration: declaration_specifiers init_declarator_list ; ",
		"init_declarator_list: init_declarator ",
		"init_declarator_list: init_declarator_list , init_declarator ",
		"init_declarator: declarator ",
		"init_declarator: declarator = initializer ",
		"type_specifier: INT ",
		"type_specifier: FLOAT ",
		"declarator: direct_declarator ",
		"direct_declarator: IDENTIFIER ",
		"direct_declarator: ( declarator ) ",
		"direct_declarator: direct_declarator [ assignment_expression ] ",
		"direct_declarator: direct_declarator [ * ] ",
		"direct_declarator: direct_declarator [ ] ",
		"direct_declarator: direct_declarator ( parameter_type_list ) ",
		"direct_declarator: direct_declarator ( identifier_list ) ",
		"direct_declarator: direct_declarator ( ) ",
		"parameter_type_list: parameter_list ",
		"parameter_type_list: parameter_list , ELLIPSIS ",
		"parameter_list: parameter_declaration ",
		"parameter_list: parameter_list , parameter_declaration ",
		"parameter_declaration: declaration_specifiers declarator ",
		"parameter_declaration: declaration_specifiers abstract_declarator ",
		"parameter_declaration: declaration_specifiers ",
		"identifier_list: IDENTIFIER ",
		"identifier_list: identifier_list , IDENTIFIER ",
		"abstract_declarator: direct_abstract_declarator ",
		"direct_abstract_declarator: ( abstract_declarator ) ",
		"direct_abstract_declarator: [ ] ",
		"direct_abstract_declarator: [ assignment_expression ] ",
		"direct_abstract_declarator: direct_abstract_declarator [ ] ",
		"direct_abstract_declarator: direct_abstract_declarator [ assignment_expression ] ",
		"direct_abstract_declarator: [ * ] ",
		"direct_abstract_declarator: direct_abstract_declarator [ * ] ",
		"direct_abstract_declarator: ( ) ",
		"direct_abstract_declarator: ( parameter_type_list ) ",
		"direct_abstract_declarator: direct_abstract_declarator ( ) ",
		"direct_abstract_declarator: direct_abstract_declarator ( parameter_type_list ) ",
		"initializer: assignment_expression ",
		"initializer: { initializer_list } ",
		"initializer: { initializer_list , } ",
		"initializer_list: initializer ",
		"initializer_list: designation initializer ",
		"initializer_list: initializer_list , initializer ",
		"initializer_list: initializer_list , designation initializer ",
		"designation: designator_list = ",
		"designator_list: designator ",
		"designator_list: designator_list designator ",
		"designator: [ constant_expression ] ",
		"designator: . IDENTIFIER ",
		"statement: compound_statement ",
		"statement: expression_statement ",
		"statement: selection_statement ",
		"statement: iteration_statement ",
		"statement: jump_statement ",
		"compound_statement: { } ",
		"compound_statement: { block_item_list } ",
		"block_item_list: block_item ",
		"block_item_list: block_item_list block_item ",
		"block_item: declaration ",
		"block_item: statement ",
		"expression_statement: ; ",
		"expression_statement: expression ; ",
		"selection_statement: IF ( expression ) statement ",
		"selection_statement: IF ( expression ) statement ELSE statement ",
		"iteration_statement: WHILE ( expression ) statement ",
		"iteration_statement: DO statement WHILE ( expression ) ; ",
		"iteration_statement: FOR ( expression_statement expression_statement ) statement ",
		"iteration_statement: FOR ( expression_statement expression_statement expression ) statement ",
		"iteration_statement: FOR ( declaration expression_statement ) statement ",
		"iteration_statement: FOR ( declaration expression_statement expression ) statement ",
		"jump_statement: CONTINUE ; ",
		"jump_statement: RETURN ; ",
		"jump_statement: RETURN expression ; ",
		"translation_unit: external_declaration ",
		"translation_unit: translation_unit external_declaration ",
		"external_declaration: function_definition ",
		"external_declaration: declaration ",
		"function_definition: declaration_specifiers declarator declaration_list compound_statement ",
		"function_definition: declaration_specifiers declarator compound_statement ",
		"declaration_list: declaration ",
		"declaration_list: declaration_list declaration ",
